import Head from 'next/head';
import { Formik, Form, Field, ErrorMessage, useField } from 'formik';
import { formSchema } from '@component/utils/validationSchema';
import { Countries, Genders, DocumentTypes } from '@component/utils/constants';
import DatePicker from 'react-datepicker';
import { useState } from 'react';
import styles from '../styles/Home.module.css';

interface FormValues {
  country: string;
  gender: string;
  firstName: string;
  lastName: string;
  dateOfBirth: any;
  documentType: string;
  documentNumber: number;
  email: string;
  password: string;
  confirmPassword: string | null;
  tel: number;
  cel: number;
  adress: string;
  zipCode: number;
}

const Home = () => {
  const [dateOfBirth, setDateOfBirth] = useState<Date | null>(null);

  const initialValues: FormValues = {
    country: '',
    gender: '',
    firstName: '',
    lastName: '',
    dateOfBirth: '',
    documentType: '',
    documentNumber: 0,
    email: '',
    password: '',
    confirmPassword: '',
    tel: 0,
    cel: 0,
    adress: '',
    zipCode: 0,
  };

  const handleSubmit = (values: FormValues) => {
    console.log(values);
  };

  return (
    <>
      <Head>
        <title>Register Form</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="space-y-12 p-20">
        <div className="border-b border-gray-900/10 pb-20">
          <h1 className="text-3xl font-bold text-gray-900">Register Form</h1>

          <Formik
            initialValues={initialValues}
            onSubmit={handleSubmit}
            validationSchema={formSchema}
          >
            {(formik) => (
              <Form>
                <div className={styles.mainContainer}>
                  <div className={styles.inputBox}>
                    <label htmlFor="country">País</label>
                    <Field
                      className="formInput"
                      name="country"
                      as="select"
                      label="country"
                      type="text"
                      error={formik.errors.country}
                    >
                      <option value="" selected disabled hidden>
                        Seleccione
                      </option>
                      {Countries.map((country, index) => (
                        <option key={index} value={country.toLowerCase()}>{country}</option>
                      ))}
                    </Field>
                    <ErrorMessage name="country" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="gender">Género</label>
                    <Field
                      className="formInput"
                      name="gender"
                      as="select"
                      label="gender"
                      type="text"
                      error={formik.errors.gender}
                    >
                      <option value="" selected disabled hidden>
                        Seleccione
                      </option>
                      {Genders.map((gender) => (
                        <option value={gender.toLowerCase()}>{gender}</option>
                      ))}
                    </Field>
                    <ErrorMessage name="gender" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="firstName">Nombre</label>
                    <Field
                      className="formInput"
                      name="firstName"
                      as="input"
                      label="Nombre"
                      type="text"
                      error={formik.errors.firstName}
                    />
                    <ErrorMessage name="firstName" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="lastName">Apellido</label>
                    <Field
                      className="formInput"
                      name="lastName"
                      as="input"
                      label="lastName"
                      type="text"
                      error={formik.errors.lastName}
                    />
                    <ErrorMessage name="lastName" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="dateOfBirth">Fecha de Nacimiento</label>
                    <DatePicker
                      className="formInput"
                      name="dateOfBirth"
                      selected={dateOfBirth}
                      onChange={(date) => setDateOfBirth(date)}
                      dateFormat="yyyy/MM/dd"
                    />
                    <ErrorMessage name="dateOfBirth" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="documentType">Tipo de Documento</label>
                    <Field
                      className="formInput"
                      name="documentType"
                      as="select"
                      label="documentType"
                      type="text"
                      error={formik.errors.documentType}
                    >
                      <option value="" selected disabled hidden>
                        Seleccione
                      </option>
                      {DocumentTypes.map((documentType) => (
                        <option value={documentType.toLowerCase()}>
                          {documentType}
                        </option>
                      ))}
                    </Field>
                    <ErrorMessage name="documentType" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="documentNumber">Número de Documento</label>
                    <Field
                      className="formInput"
                      name="documentNumber"
                      as="input"
                      label="documentNumber"
                      type="number"
                      error={formik.errors.documentNumber}
                    />
                    <ErrorMessage name="documentNumber" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="email">Email</label>
                    <Field
                      className="formInput"
                      name="email"
                      as="input"
                      label="email"
                      type="email"
                      error={formik.errors.email}
                    />
                    <ErrorMessage name="email" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="password">Password</label>
                    <Field
                      className="formInput"
                      name="password"
                      as="input"
                      label="password"
                      type="password"
                      error={formik.errors.password}
                    />
                    <ErrorMessage name="password" component="span" />
                  </div>

                  <div className={styles.inputBox}>
                    <label htmlFor="password">Confirm Password</label>
                    <Field
                      className="formInput"
                      name="confirmPassword"
                      as="input"
                      label="confirmPassword"
                      type="password"
                      error={formik.errors.confirmPassword}
                    />
                    <ErrorMessage name="confirmPassword" component="span" />
                  </div>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>
    </>
  );
};

export default Home;
